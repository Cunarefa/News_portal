# Generated by Django 3.2.9 on 2021-11-11 12:58
import random

from django.contrib.auth.base_user import BaseUserManager
from django.contrib.auth.hashers import make_password
from django.db import migrations

from faker import Faker

fake = Faker()


def create_db_records(apps, schema_editor):
    User = apps.get_model('portal_app', 'User')
    Company = apps.get_model('portal_app', 'Company')
    Post = apps.get_model('portal_app', 'Post')

    companies = []
    users = []
    posts = []

    for _ in range(1, 11):
        company = Company(name=fake.company(),
                          # url=f'https://www.{Company.name.value.lower()}.com',
                          date_created=fake.date()
                          )
        name = ''.join(char for char in company.name.lower() if char.isalnum())
        company.url = f'https://www.{name}.com'
        companies.append(company)

    for _ in range(1, 201):
        user = User(email=fake.unique.email(),
                    password=make_password(BaseUserManager().make_random_password()),
                    user_type='Client',
                    first_name=fake.first_name(),
                    last_name=fake.last_name(),
                    phone_number=fake.phone_number(),
                    company=random.choice(companies)
                    )

        users.append(user)

    for _ in range(1, 31):
        post = Post(title=fake.text(max_nb_chars=20),
                    text=fake.text(max_nb_chars=150),
                    topic=random.choice(['nature', 'sport', 'travel', 'art']),
                    author=random.choice(users)
                    )
        posts.append(post)

    Company.objects.bulk_create(companies)
    User.objects.bulk_create(users)
    Post.objects.bulk_create(posts)


def reverse_func(apps, schema_editor):
    User = apps.get_model('portal_app', 'User')
    Company = apps.get_model('portal_app', 'Company')
    Post = apps.get_model('portal_app', 'Post')

    User.objects.all().delete()
    Company.objects.all().delete()
    Post.objects.all().delete()


class Migration(migrations.Migration):
    dependencies = [
        ('portal_app', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(create_db_records, reverse_func)
    ]


